// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: peer/peer.proto

package peer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PeerServiceClient is the client API for PeerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeerServiceClient interface {
	FindPeers(ctx context.Context, in *FindPeersRequest, opts ...grpc.CallOption) (*FindPeersResp, error)
	Message(ctx context.Context, opts ...grpc.CallOption) (PeerService_MessageClient, error)
}

type peerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerServiceClient(cc grpc.ClientConnInterface) PeerServiceClient {
	return &peerServiceClient{cc}
}

func (c *peerServiceClient) FindPeers(ctx context.Context, in *FindPeersRequest, opts ...grpc.CallOption) (*FindPeersResp, error) {
	out := new(FindPeersResp)
	err := c.cc.Invoke(ctx, "/peer.PeerService/FindPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerServiceClient) Message(ctx context.Context, opts ...grpc.CallOption) (PeerService_MessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &PeerService_ServiceDesc.Streams[0], "/peer.PeerService/Message", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerServiceMessageClient{stream}
	return x, nil
}

type PeerService_MessageClient interface {
	Send(*MessageBody) error
	Recv() (*MessageBody, error)
	grpc.ClientStream
}

type peerServiceMessageClient struct {
	grpc.ClientStream
}

func (x *peerServiceMessageClient) Send(m *MessageBody) error {
	return x.ClientStream.SendMsg(m)
}

func (x *peerServiceMessageClient) Recv() (*MessageBody, error) {
	m := new(MessageBody)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PeerServiceServer is the server API for PeerService service.
// All implementations must embed UnimplementedPeerServiceServer
// for forward compatibility
type PeerServiceServer interface {
	FindPeers(context.Context, *FindPeersRequest) (*FindPeersResp, error)
	Message(PeerService_MessageServer) error
	mustEmbedUnimplementedPeerServiceServer()
}

// UnimplementedPeerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPeerServiceServer struct {
}

func (UnimplementedPeerServiceServer) FindPeers(context.Context, *FindPeersRequest) (*FindPeersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPeers not implemented")
}
func (UnimplementedPeerServiceServer) Message(PeerService_MessageServer) error {
	return status.Errorf(codes.Unimplemented, "method Message not implemented")
}
func (UnimplementedPeerServiceServer) mustEmbedUnimplementedPeerServiceServer() {}

// UnsafePeerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeerServiceServer will
// result in compilation errors.
type UnsafePeerServiceServer interface {
	mustEmbedUnimplementedPeerServiceServer()
}

func RegisterPeerServiceServer(s grpc.ServiceRegistrar, srv PeerServiceServer) {
	s.RegisterService(&PeerService_ServiceDesc, srv)
}

func _PeerService_FindPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).FindPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.PeerService/FindPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).FindPeers(ctx, req.(*FindPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerService_Message_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PeerServiceServer).Message(&peerServiceMessageServer{stream})
}

type PeerService_MessageServer interface {
	Send(*MessageBody) error
	Recv() (*MessageBody, error)
	grpc.ServerStream
}

type peerServiceMessageServer struct {
	grpc.ServerStream
}

func (x *peerServiceMessageServer) Send(m *MessageBody) error {
	return x.ServerStream.SendMsg(m)
}

func (x *peerServiceMessageServer) Recv() (*MessageBody, error) {
	m := new(MessageBody)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PeerService_ServiceDesc is the grpc.ServiceDesc for PeerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PeerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "peer.PeerService",
	HandlerType: (*PeerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindPeers",
			Handler:    _PeerService_FindPeers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Message",
			Handler:       _PeerService_Message_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "peer/peer.proto",
}
